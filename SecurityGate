// components/SecurityGate.tsx

import React, { useEffect, useState } from 'react';
import { View, Text, ActivityIndicator, StyleSheet } from 'react-native';
import DeviceInfo from 'react-native-device-info';

interface Props {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

const SecurityGate: React.FC<Props> = ({ children, fallback }) => {
  const [isSecure, setIsSecure] = useState<boolean | null>(null);

  useEffect(() => {
    const validateDevice = async () => {
      const isRooted = await DeviceInfo.isDeviceRooted();
      const isEmulator = await DeviceInfo.isEmulator();
      // You can expand with certificate validation or Frida detection here
      setIsSecure(!isRooted && !isEmulator);
    };
    validateDevice();
  }, []);

  if (isSecure === null) {
    return (
      <View style={styles.center}>
        <ActivityIndicator size="large" />
        <Text>Checking device integrity…</Text>
      </View>
    );
  }

  if (!isSecure) {
    return fallback || (
      <View style={styles.center}>
        <Text style={styles.warning}>⚠️ Secure environment required.</Text>
        <Text>Please use Kinri on an official device and platform.</Text>
      </View>
    );
  }

  return <>{children}</>;
};

const styles = StyleSheet.create({
  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },
  warning: { fontWeight: '600', color: '#CC0000', marginBottom: 6 },
});

export default SecurityGate;

//how to use
import SecurityGate from './components/SecurityGate';
import VaultScreen from './screens/VaultScreen';

export default function SecureVaultEntry() {
  return (
    <SecurityGate>
      <VaultScreen />
    </SecurityGate>
  );
}
